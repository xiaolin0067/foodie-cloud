性能调优四板斧：
1、借助监控预防问题、发现问题
2、借助工具定位问题
3、定期复盘，防止问题重复发生
4、定好规范规避问题

性能调优章节内容：应用性能调优、JVM调优、数据库调优、架构调优、操作系统调优

一、监控工具：skywalking
skywalking：适用于分布式系统的性能监控工具
官网地址：https://skywalking.apache.org/
官方文档：https://skywalking.apache.org/docs/main/latest/readme/
中文文档：https://www.itmuch.com/books/skywalking/
提供的功能：分布式跟踪和上下文传播、数据库访问指标、告警

安装
最新版本下载页：https://skywalking.apache.org/downloads/
后端和UI下载Foundations中SkyWalking APM，监控下载agents中Java Agent，选择distribution
8.9.1下载地址：https://dlcdn.apache.org/skywalking/8.9.1/apache-skywalking-apm-8.9.1.tar.gz
skywalking端口占用：11800-gRPC, 12800-http, 8080-UI
需要jdk8+,解压即可

启动
bin/startup.sh

使用
Java服务需要使用Java agent来上报监控数据到skywalking，所以在启动服务的机器上需要部署Java agent，多个服务可共用一个agent
1、准备Java agent
下载解压java agent，编辑skywalking-agent/config/agent.config
collector.backend_service=192.168.3.26:11800
2、启动服务，在JVM参数中添加如下内容，并且确保这个参数在-jar参数之前
-javaagent:${path}/skywalking-agent/skywalking-agent.jar=agent.service_name=服务名
3、调用服务接口，访问skywalking UI进行查看：http://192.168.3.26:8080，其中追踪界面比较重要

架构
skywalking支持多种监控数据收集方式，Tracing(跟踪java agent), Metrics(采集 Service Mesh), logging, Event Detector
通过kafka、gRPC、rest-api等方式上报给skywalking receiver cluster
skywalking UI和Backend使用http端口12800用GraphQL交互
skywalking支持多种存储方式，默认为H2内嵌式数据库，还支持ES、mysql、TIDB等

java agent配置方式
配置项参考中文文档：https://www.itmuch.com/books/skywalking/setup/service-agent/java-agent/
配置文件：skywalking-agent/config/agent.config
系统属性：启动加上JVM参数-Dskywalking.${参数=值}例如：-Dskywalking.collector.backend_service=192.168.3.26:11800
代理选项：-javaagent:${path}/skywalking-agent/skywalking-agent.jar=${key1=value1},${key2=value2}
系统环境变量：在环境变量中配置${SW_AGENT_COLLECTOR_BACKEND_SERVICES}
优先级：代理选项>系统属性>系统环境变量>配置文件

java agent配置实战
1、设置采样 (意义：默认情况下所有监控数据都会上报，高并发情况下会影响性能。zipkin也有类似配置采样率)
agent.sample_n_per_3_secs=${SW_AGENT_SAMPLE:-1}
agent.sample_n_per_3_secs为负数或0表示不采样，默认为-1不采样。否则表示每3秒采样的条数，若对服务性能影响不大可不设置采样全部上报。
2、打印SQL详情，包括参数
plugin.jdbc.trace_sql_parameters=${SW_JDBC_TRACE_SQL_PARAMETERS:false}
如果设置为true, SQL查询(典型的是 java.sql.PreparedStatement)的参数也会被采集
plugin.jdbc.sql_parameters_max_length=${SW_PLUGIN_JDBC_SQL_PARAMETERS_MAX_LENGTH:512}
如果设置为正整数, 收集的SQL参数db.sql.parameters会被截断到这个长度, 否则会被完整保存, 这可能会导致性能问题

java agent插件
内置插件，对当前主流框架的支持：skywalking-agent/plugins/
引导插件：skywalking-agent/bootstrap-plugins/
可选插件：skywalking-agent/optional-plugins/
默认启用内置插件，添加或移除插件只需把jar移除或移进plugins目录
插件扩展：
1、可将链路追踪监控细化到每个bean，激活插件即可用：apm-spring-annotation-plugin (optional-plugins)
2、监控进一步细化，监控方法中任意代码：apm-customize-enhance-plugin (optional-plugins)
①激活插件
②在xml中配置增强规则
vim customize_enhance.xml
文档地址：
https://www.itmuch.com/books/skywalking/setup/service-agent/java-agent/Customize-enhance-trace.html
https://skywalking.apache.org/docs/skywalking-java/latest/en/setup/service-agent/java-agent/customize-enhance-trace/#support-custom-enhance
配置如下内容：
<?xml version="1.0" encoding="UTF-8"?>
<enhanced>
    <class class_name="org.apache.commons.lang3.StringUtils">
        <method method="isBlank(java.lang.CharSequence)" operation_name="/StringUtils-isBlank" static="true">
            <tag key="arg[0]">arg[0]</tag>
            <tag key="returnedObj">returnedObj</tag>
        </method>
    </class>
</enhanced>
配置	                   说明
class_name	           要被增强的类，注意该类需要为方法定义的类而非调用方法的类。
method	               类的拦截器方法，参数之间不可添加空格
operation_name	       即UI上的端点。如果进行了配置，将用它替代默认
operation_name_suffix  表示在operation_name后添加动态数据后缀
static	               方法是否为静态方法
tag	                   将在local span中添加一个tag。key的值需要在XML节点上表示。
log	                   将在local span中添加一个log。key的值需要在XML节点上表示。
arg[x]	               表示输入的参数值。比如args[0]表示第一个参数。
.[x]	               当正在被解析的对象是Array或List，你可以用这个表达式得到对应index上的对象。
.['key']	           当正在被解析的对象是Map, 你可以用这个表达式得到map的key。
③在agent.config中配置plugin.customize.enhance_file，指明增强规则文件路径
自定义插件开发：
https://blog.csdn.net/lt326030434/article/details/107149727

skywalking存储
修改存储方式，编辑配置文件
vim skywalking/config/application.yml
修改存储类型参数
storage.selector

告警
自定义告警与Webhook告警推送，文档地址：https://www.itmuch.com/books/skywalking/setup/backend/backend-alarm.html

动态参数配置
可动态配置部分参数，如自定义告警
文档地址：https://www.itmuch.com/books/skywalking/setup/backend/dynamic-config.html
需要额外的配置服务器，如nacos
https://nacos.io/zh-cn/docs/quick-start.html

二、监控工具：spring boot actuator
官方文档：https://docs.spring.io/spring-boot/docs/2.0.x/actuator-api/html/
安装，项目添加依赖即可
<!-- spring boot actuator监控 -->
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-actuator</artifactId>
</dependency>
配置，在项目配置文件中添加
management:
  endpoint:
    health:
      show-details: always           # 查看详情
  endpoints:
    web:
      exposure:
        include: '*'                 # 开放所有监控端点，默认只有heal,info是开启的
注：在以前的1.5.x版本使用：management.security.enabled=false来开放所有端点
启动项目后会打印日志： Exposing 15 endpoint(s) beneath base path '/actuator'
使用
查看所有激活端点
GET http://localhost:8088/actuator
健康检查
GET http://localhost:8088/actuator/health
其中status枚举：UP 正常，DOWN 不正常，OUT-OF-SERVICE 资源未在使用或不应该使用，UNKNOWN 未知
健康检查：即检查当前应用使用的资源状态，如mysql、redis、磁盘空间
自定义健康检查项：实现 AbstractHealthIndicator ，实现doHealthCheck方法
查看信息
GET http://localhost:8088/actuator/info
用户返回项目描述信息，在配置文件中配置的key-val将会被返回，如
info:
  project-name: foodie-dev
  owner-email: test@test.com
一般用于告警类工具获取项目信息
查看当前spring管理所有的bean
GET http://localhost:8088/actuator/beans
查看当前所有配置属性
GET http://localhost:8088/actuator/configprops
查看metrics监控列表
GET http://localhost:8088/actuator/metrics
获取metrics具体监控项的值，如system.cpu.count
GET http://localhost:8088/actuator/metrics/system.cpu.count
使用loggers修改日志级别
curl 'http://localhost:8080/actuator/loggers/ROOT' -i -X POST \
    -H 'Content-Type: application/json' \
    -d '{"configuredLevel":"debug"}'

spring boot actuator可视化：SpringBootAdmin
官方地址：https://github.com/codecentric/spring-boot-admin
文档：https://codecentric.github.io/spring-boot-admin/2.5.1/
使用：创建SpringBootAdmin server应用并注册到注册中心，浏览器访问admin-server
注册中心中其他微服务需开启actuator端点

老牌监控工具（界面较丑功能强大）：JavaMelody
官方文档：https://github.com/javamelody/javamelody
使用：给项目添加依赖，修改项目配置，浏览器访问：http://localhost:10002/monitoring
github提Issues步骤/经验：
1、描述问题
2、提供复现步骤
3、附带代码，可直接为GitHub地址
4、@项目贡献者(contributors)

Tomcat服务器监控工具（仅可用于传统Tomcat服务器方式使用，不可用于springboot）：Tomcat Manager、PSI probe
Tomcat Manager使用，编辑conf/tomcat-users.xml，填入如下内容
  <role rolename="manager-gui"/>
  <role rolename="manager-script"/>
  <role rolename="manager-jmx"/>
  <role rolename="manager-status"/>
  <user username="admin" password="123456" roles="manager-gui,manager-script,manager-jmx,manager-status"/>
开启允许远程访问

总结：
仅支持传统Tomcat服务器：TomcatManager、PSIProbe
都支持：
Skywalking、SpringbootActuator+SpringBootAdmin、JavaMelody
ELK、Sleuth+Zipkin、Hystrix+Dashboard、Sentinel+Dashboard












